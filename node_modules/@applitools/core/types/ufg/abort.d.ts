import type { AbortSettings, TestResult } from './types';
import type { Eyes as BaseEyes } from '@applitools/core-base';
import { type Logger } from '@applitools/logger';
import { type Renderer } from '@applitools/ufg-client';
import { type AbortController } from 'abort-controller';
import type { DriverTarget } from './types';
import { type SpecDriver } from '@applitools/driver';
type Options<TDriver, TContext, TElement, TSelector> = {
    storage: {
        renderer: Renderer;
        promise: Promise<{
            eyes: BaseEyes;
            renderer: Renderer;
        }>;
    }[];
    controller: AbortController;
    target?: DriverTarget<TDriver, TContext, TElement, TSelector>;
    spec?: SpecDriver<TDriver, TContext, TElement, TSelector>;
    logger: Logger;
};
export declare function makeAbort<TDriver, TContext, TElement, TSelector>({ storage, target, spec, controller, logger: defaultLogger, }: Options<TDriver, TContext, TElement, TSelector>): ({ settings, logger, }?: {
    settings?: AbortSettings;
    logger?: Logger;
}) => Promise<TestResult[]>;
export {};
