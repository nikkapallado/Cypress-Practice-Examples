import type { MaybeArray } from '@applitools/utils';
import type { Target, DriverTarget, Eyes, Config, ExtractTextSettings } from './types';
import { type Logger } from '@applitools/logger';
type Options<TDriver, TContext, TElement, TSelector, TType extends 'classic' | 'ufg'> = {
    eyes: Eyes<TDriver, TContext, TElement, TSelector, TType>;
    target?: DriverTarget<TDriver, TContext, TElement, TSelector>;
    logger: Logger;
};
export declare function makeExtractText<TDriver, TContext, TElement, TSelector, TType extends 'classic' | 'ufg' = 'classic'>({ eyes, target: defaultTarget, logger: defaultLogger, }: Options<TDriver, TContext, TElement, TSelector, TType>): ({ target, settings, config, logger, }: {
    target?: Target<TDriver, TContext, TElement, TSelector, 'classic'>;
    settings: MaybeArray<ExtractTextSettings<TElement, TSelector, 'classic'>>;
    config?: Config<TElement, TSelector, 'classic'>;
    logger?: Logger;
}) => Promise<string[]>;
export {};
